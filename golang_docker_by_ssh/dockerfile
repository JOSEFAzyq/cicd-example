# 基础镜像，基于golang的alpine镜像构建--编译阶段
FROM golang:alpine AS builder

RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories \
        && apk update \
        && apk add --no-cache build-base libmcrypt-dev

ARG APP_PATH=/go/app

# 作者
MAINTAINER Josefa
# 全局工作目录
WORKDIR ${APP_PATH}
#  用于代理下载go项目依赖的包
ENV GOPROXY https://goproxy.cn,direct
# 把运行Dockerfile文件的当前目录所有文件复制到目标目录
COPY ./go.mod ./
COPY ./go.sum ./
RUN go mod download

COPY . .
# 环境变量

# 编译，关闭CGO，防止编译后的文件有动态链接，而alpine镜像里有些c库没有，直接没有文件的错误
RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -ldflags "-s -w" ./apps/admin/main.go

# 使用alpine这个轻量级镜像为基础镜像--运行阶段
FROM alpine AS runner

RUN set -eux && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories \
        && apk update \
        && apk add --no-cache build-base libmcrypt-dev

ARG APP_PATH=/go/app
# 全局工作目录
WORKDIR ${APP_PATH}
# 复制编译阶段编译出来的运行文件到目标目录
COPY --from=builder ${APP_PATH}/main .
# 需暴露的端口
EXPOSE 8061

# 时区问题
ENV TZ=Asia/Shanghai

RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories && \
    apk update && apk add tzdata  && \
    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone
# 自动挂载匿名卷,其实这样做不好
VOLUME ["/go/pre_exam/logs"]
# docker run命令触发的真实命令(相当于直接运行编译后的可运行文件)
ENTRYPOINT ["./main"]